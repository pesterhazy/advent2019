1575191056690:(defn fuel [mass] (-> mass (/ 3) (- 2)))
1575191065700:(fuel 12)
1575191079971:(fuel 14)
1575191092570:(doc div)
1575191095621:(clojure.repl/doc div)
1575191102463:(clojure.repl/doc mod)
1575191113931:(clojure.repl/doc /)
1575191131422:(defn fuel [mass] (-> mass (/ 3) Math/floor (- 2)))
1575191137114:(fuel 14)
1575191154155:"anke"
1575191157346:(+ 1 2)
1575191177948:(fuel 100756)
1575191235384:(->> (clojure.java.io/reader "inputs/1.txt") line-seq)
1575191291861:(->> (clojure.java.io/reader "inputs/1.txt") line-seq (map #(Long/parseLong %)))
1575191589091:(clojure.repl/doc line-seq)
1575191755155:(odd? 5)
1575191761290:(odd? 6)
1575191819206:(clojure.repl/doc odd?)
1575191953913:(odd? 5)
1575192065109:(map odd? [5 6 7])
1575192290067:(def numbers (->> (clojure.java.io/reader "inputs/1.txt") line-seq (map #(Long/parseLong %))))
1575192297280:numbers
1575192450790:(map fuel numbers)
1575192558132:(->> (map fuel numbers) (apply +))
1575192827801:(require 'advent.puzzle01)
1575192835188:(advent.puzzle01/result)
1575192880178:(require 'advent.puzzle01 :reload)
1575192881563:(advent.puzzle01/result)
1575193152106:(require 'advent.puzzle01 :reload)
1575193189227:(in-ns 'advent.puzzle01)
1575193219353:(->> (iterate fuel 966) (take 20))
1575193232211:(->> (iterate fuel 966) (take-while pos?))
1575193242783:(->> (iterate fuel 966) (take-while pos?) (apply +))
1575193253603:(->> (iterate fuel 1969) (take-while pos?) (apply +))
1575193275702:(->> (iterate fuel 1969) (take-while pos?))
1575193292573:(->> (iterate fuel 1969) (take-while pos?) (apply +))
1575193316375:(->> (iterate fuel 1969) (drop 1) (take-while pos?) (apply +))
1575193379918:(require 'advent.puzzle01 :reload)
1575193387048:(solution-2)
1575275072298:(def s)
1575275076219:(def s "1,9,10,3,2,3,11,0,99,30,40,50")
1575275114162:(def state (->> (clojure.string/split s ",")))
1575275120339:(def state (->> (clojure.string/split s #",")))
1575275137927:(def state (->> (clojure.string/split s #",") (map #(Long/parseLong %)))
1575275144941:(def state (->> (clojure.string/split s #",") (map #(Long/parseLong %))))
1575275146305:state
1575275206055:(def state {:mem (->> (clojure.string/split s #",") (map #(Long/parseLong %))) :ip 0})
1575275207004:state
1575275250886:(defn next-state [{:keys [ip mem]}] (prn (noth mem ip)))
1575275254666:(defn next-state [{:keys [ip mem]}] (prn (nth mem ip)))
1575275258566:(next-state state)
1575275370833:(defn next-state [{:keys [ip mem]}] (case (nth mem ip) 1))
1575275871506:(require 'advent.puzzle02 :reload)
1575275877189:(in-ns 'advent.puzzle02)
1575275882673:(next-state state)
1575276084313:(require 'advent.puzzle02 :reload)
1575276085878:(next-state state)
1575276135054:(do (require 'advent.puzzle02 :reload) (next-state state))
1575276347550:(do (require 'advent.puzzle02 :reload) (solution))
1575276577355:(merge [5 6 7] {1 8})
1575276619640:(reduce (fn [acc [k v]] (assoc acc k v) [5 6 7] {1 8})
1575276623203:(reduce (fn [acc [k v]] (assoc acc k v)) [5 6 7] {1 8})
1575276630211:(reduce (fn [acc [k v]] (assoc acc k v)) [5 6 7] {1 8 2 99})
1575276876758:(do (require 'advent.puzzle02 :reload) (solution))
1575276888672:(advent.util/read-csv "2.txt")
1575276954560:(require 'advent.util :reload)
1575276961136:(advent.util/read-csv-longs "2.txt")
1575277076852:(do (require 'advent.puzzle02 :reload) (solution))
